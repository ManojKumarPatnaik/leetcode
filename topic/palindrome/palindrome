[Properties]
    1. 從前面走, 跟從後面走的字串是相同的
    2. 從中間往左走跟往右走的字串是相同的.
    3. Longest common subsequence--> str跟reverse str的longest common subsequence為最長的.
       (就是等於自己)
    4. 若想要透過刪除找到palindrome, 不存在ss[s] == ss[e]時, 
        找s + 1, e or s, e - 1的case.
       (也就是ss[s] == ss[e]時, 下一步只有s + 1, e - 1這個case)
    5. palindrome是可以組出來的, 因為前半部跟後半部是一樣的, 
        所以只要知道一半就可以組出來.

[Leetcode]
	1. 9. Palindrome Number (給一個數字, 問該數字是否為迴文)
	2. 7. Reverse Integer (給一個數字, 反轉該數字)
	3. 266. Palindrome Permutation (給一個字串, 判斷是否可以排列組合成迴文)
    4. 409. Longest Palindrome(給一個字串, 回傳可以組成最長的palindrome(只能由該string取出character))
      --> 基本上邏輯同[3]
    5. 234. Palindrome Linked List (給定一個list, 判斷它是否為palindrome)
      --> 這個是因為linked list為單向, 若為雙向的話, 基本上就跟[1]相同.
      --> 可以利用palindrom的特性: 從中間往左走跟往右走是相同的.
    6. 125. Valid Palindrome (給定一個字串, 判斷它是否迴文, 但有條件, 只針對數字, 字母,且ignore case.)
      --> 其實就是先做處理, 只留數字, 字母, 並把字母轉成小寫, 這樣就跟[1]一樣.
    7. 680. Valid Palindrome II 
      - Description:
        1. 給定一個字串,判斷是否迴文, 但有條件, 你最多可以刪除一個character.
        2. 有限制, 字串長度最多為50000

      --> 可以使用Longese common subsequence的遞迴解法來判斷.
      --> 因為其實就是str跟reverse-str的longest common subsequence長度比原先的<=1 就是True.
          (但不能這樣解, 因為time complexity會太大 - 字串長度可以到50000)
      --> 其實好像也沒有這麼複雜, 因為只能刪除最多一次, 所以如果刪除後, 只要判斷整各string就好了.
      --> 原本是認為總共有三種case(不論為相同或不相同)
          1. ss[s] == ss[e] --> s + 1, e - 1 or s + 1, e or s, e - 1
          2. ss[s] != ss[e] --> s + 1, e or s, e - 1
          但是相同的話,並不存在e - 1 or s + 1, e or s, e - 1來找到palindrome.
          for example:
          abccbaa, 若存在相同,且刪掉後可以找到palindrome, 那一定也可以刪除裡面那一個來找到同樣的palindrome.
          因為ss[s] 一定會等於 ss[e]與ss[e - 1] 
    8. 479. Largest Palindrome Product
        - Description:
            1. 給一個number, 找一個迴文, 而這個迴文必須由兩個n位數的數字相乘.

        - Analysis:
            這題大概就兩個思路:
            1. 把所有n位數兩兩相乘, 判斷是否為迴文.
                --> Time Complexity太高, 因為位數最高為8
            2. 因為知道是兩個n位數相乘, 所以可以得到最大值,
                且兩個n位數相乘, 最後的位數一定<= 2n, 且一定小於pow(10, n) * pow(10, n).
                以n = 3為例, 最大值為999 * 999, 一定小於1000 * 1000.
                所以一定小於1000 * 1000 - 1 = 999999,
                因為只找迴文, 所以可以從中切一半--> 999, 998, 997, 996, ...
                再組成迴文來判斷是否可以被兩個n位數所整除, 若是則為答案.
                --> Time complexity為O(n*sqrt(n)), 這是pseudo polynomial, 因為n+1, 成長為指數倍.
                    只是演算法看起來像是polynomial而已.

    9. 131. Palindrome Partitioning
        - Description
            1. 給定一個字串, 問可以切割成多少substring組合, 且每個substring都是palindrome.
        - Analysis
            1. 基本上就是遞迴求解, 只是每個substring要判斷是否為palindrome.
            2. 遞迴求解有兩個方式, 一個是在最末端決定答案, 
                另一個則是在一開始合併其它遞迴式的結果來得到答案.
    
    10. 132. Palindrome Partitioning II
        - Description
            1. 給一個string, 想得到minimal cut, 且cut後的結果每個部分都是palindrome.
        
        - Analysis
            1. 
[GeekForGeeks]
	
